clear;
close all;
clc;

P = []; % массив параметров для обучения нейросети
T = []; % массив правильных типов для обучения нейросети

iters = 1000;  % количество генерируемых объектов
nncorr = 0; % переменная для накопления количества правильных определений типа нейросейтью
fcorr = 0; % переменная для накопления количества правильных определений типа нечеткйо логикой

load net.mat % загрузка объекта обученной нейросети
load fuzzy_old.mat % загрузка объекта алгоритма нечёткой логики

for i=1:iters % цикл для создания и обработки объектов 

    type = randi(3); % случайный выбор типа объекта (ПЛ, Имитатор, Облако отражателей)
    s = gen_echo(type); % функция генерации эхосигнала
    blinks = proc_echo(s); % функция обработки эхосигнала (получение точек параметров отраженных точек)
    params = proc_blinks(blinks); % фукция вычисления параметров объекта (длина, ширина, угол)

    if (1)
        new_type = net.Network(params'); % вычисление типа объекта при помоци нейросети, в виде "[0 0 1]"
        [nnm,nnt] = max(new_type); % преобразование типа к виду "3"

        fuz_type = evalfis(params',fuzzy); % вычисление типа объекта при помощи алгоритма нечеткой логики, в виде "[0 0 1]"
        [fm,ft] = max(fuz_type); % преобразование типа к виду "3"

        if ft==type
%             disp('OK')
            fcorr = fcorr + 1; % если алгоритм нечеткой логики угадал тип объекта, то увеличиваем значение переменной
        else
%             disp('Error')
        end

        if nnt==type
%             disp('OK')
            nncorr = nncorr + 1; % если нейросеть угадала тип объекта, то увеличиваем значение переменной
        else
%             disp('Error')
        end
    end
%     
    if isnan(params(1)) % обработка ошибки
%         disp('NaN')
    else
        P = [P; params]; % заполенение массива параметров для обучения нейросети
        class = [0 0 0];
        class(type) = 1;
        T = [T; class]; % заполение массива типов для обучения нейросети
    end

end

disp(strcat('ВПК (NN) = ',num2str(nncorr/iters*100),' %')); % вычисление значения вероятности првильной классификации для нейросети
disp(strcat('ВПК (FUZ) = ',num2str(fcorr/iters*100),' %')); % вычисление значения вероятности првильной классификации для алгоритма нечеткой логики
